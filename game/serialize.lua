local serialize = {}

--[[
  From github.com
  Lua Table Serializer/Deserializer

  This script provides two functions:
  1. `serialize(data)`: Converts a Lua table (containing numbers, booleans, strings,
     and nested tables of these types) into a Lua source code string.
  2. `deserialize(str)`: Converts a Lua source code string (generated by `serialize`)
     back into a Lua table.

  Limitations:
  - Does NOT handle functions, userdata, threads, or metatables. These will be
    represented as `nil` or cause an error if not explicitly handled.
  - Does NOT handle circular table references (tables that refer back to themselves
    or their parent tables). This will cause an infinite loop. For complex
    serialization, consider dedicated libraries like 'Ser' or 'bitser'.
  - Deserialization uses `load()`, which executes the string as Lua code. Be cautious
    when deserializing data from untrusted sources, as it could pose a security risk.
]]

--- serializes a lua table into a lua source code string.
-- @param data table the table to serialize.
-- @param indent_level number (optional) the current indentation level for pretty printing.
-- @return string the lua source code string representation of the table.
local function do_serialize(data, indent_level)
    indent_level = indent_level or 0
    local indent_str = string.rep("  ", indent_level)
    local s = ""

    if type(data) == "table" then
        s = s .. "{\n"
        local first_element = true
        for k, v in pairs(data) do
            if not first_element then
                s = s .. ",\n"
            end
            first_element = false

            s = s .. indent_str .. "  " -- indent for key-value pair

            -- serialize key
            if type(k) == "string" then
                s = s .. string.format("[%q]", k) -- use %q for string keys to handle special chars
            elseif type(k) == "number" then
                s = s .. "[" .. tostring(k) .. "]"
            else
                -- for unsupported key types, you might want to error or skip
                error("Unsupported key type for serialization: " .. type(k))
            end

            s = s .. " = "

            -- serialize value recursively
            if type(v) == "table" then
                s = s .. do_serialize(v, indent_level + 1)
            elseif type(v) == "string" then
                s = s .. string.format("%q", v) -- use %q for string values
            elseif type(v) == "number" then
                s = s .. tostring(v)
            elseif type(v) == "boolean" then
                s = s .. tostring(v)
            elseif type(v) == "nil" then
                s = s .. "nil" -- explicitly write nil for clarity, though often omitted
            else
                -- handle unsupported value types (e.g., functions, userdata)
                -- for this basic serializer, we'll represent them as nil and print a warning.
                s = s .. "nil -- [warning: unserializable type '" .. type(v) .. "' replaced with nil]"
            end
        end
        s = s .. "\n" .. indent_str .. "}"
    elseif type(data) == "string" then
        s = string.format("%q", data)
    elseif type(data) == "number" then
        s = tostring(data)
    elseif type(data) == "boolean" then
        s = tostring(data)
    elseif type(data) == "nil" then
        s = "nil"
    else
        -- for top-level unsupported types
        s = "nil -- [warning: unserializable type '" .. type(data) .. "' replaced with nil]"
    end

    return s
end

--- deserializes a lua source code string back into a lua table.
-- @param str string the lua source code string to deserialize.
-- @return table|nil the deserialized table, or nil if an error occurred.
-- @return string|nil an error message if deserialization failed.
local function do_deserialize(str)
    -- wrap the string in `return (...)` to ensure it's treated as an expression
    -- and returns a value, rather than just executing statements.
    local chunk, err = load("return " .. str)
    if not chunk then
        return nil, "Syntax error in serialized data: " .. err
    end

    local success, result = pcall(chunk)
    if success then
        return result
    else
        return nil, "Runtime error during deserialization: " .. result
    end
end

function serialize.save_data(data)
    local serialized = do_serialize(data)
    love.filesystem.write("save.lua", serialized)
    print("saved")
end

function serialize.load_data()
    local content = love.filesystem.read("save.lua")
    if content then
        return do_deserialize(content)
    end
    return nil
end

return serialize